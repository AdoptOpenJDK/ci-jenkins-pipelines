// Build once a day
CRON_SETTINGS = '''H H * * *'''
NODE_LABEL = "dockerBuild&&linux&&x64"

pipeline {
    agent none

    triggers {
        cron(CRON_SETTINGS)
    }

    stages {
        stage('Dependency Build') {
            parallel {
                stage('asmtools') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('asmtools')
                    }
                }
                stage('jcov') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jcov')
                    }
                }
                stage('jtharness') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jtharness')
                    }
                }
                stage('sigtest') {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('sigtest')
                    }
                }
            }
        }

        stage('Downstream Build') {
            parallel {
                stage("jtreg") {
                    agent {
                        label NODE_LABEL
                    }
                    steps {
                        build('jtreg')
                    }
                }
            }
        }
    }
}

def build(stageName) {
    cleanWs()
    docker.image('adoptopenjdk/centos7_build_image').inside {
        checkout scm
        sh "hg clone http://hg.openjdk.java.net/code-tools/${stageName}"
        if (stageName == "jtreg") {
            step([$class: 'CopyArtifact', filter: 'jcov/jcov-*.tar.gz', fingerprintArtifacts: true, flatten: true, projectName: "${JOB_NAME}", selector: [$class: 'SpecificBuildSelector', buildNumber: "${BUILD_NUMBER}"], target: 'jreg/'])
            step([$class: 'CopyArtifact', filter: 'asmtools/asmtools-*.tar.gz', fingerprintArtifacts: true, flatten: true, projectName: "${JOB_NAME}", selector: [$class: 'SpecificBuildSelector', buildNumber: "${BUILD_NUMBER}"], target: 'jreg/'])
            step([$class: 'CopyArtifact', filter: 'jtharness/jtharness*.tar.gz', fingerprintArtifacts: true, flatten: true, projectName: "${JOB_NAME}", selector: [$class: 'SpecificBuildSelector', buildNumber: "${BUILD_NUMBER}"], target: 'jreg/'])
        }
        sh label: "${stageName}", script: "./tools/code-tools/${stageName}.sh"
        archiveArtifacts artifacts: "${stageName}/*.tar.gz, ${stageName}/${stageName}.jar, ${stageName}/${stageName}.jar.*.txt, ${stageName}/*.tar.gz.*sum*.txt", followSymlinks: false
        slackSend channel: 'jenkins', color: 'good', message: "${env.JOB_NAME}:${env.BUILD_NUMBER} PASSED", teamDomain: 'adoptopenjdk'
    }
}